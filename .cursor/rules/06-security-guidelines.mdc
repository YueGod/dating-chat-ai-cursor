---
description: 
globs: 
alwaysApply: true
---
# 安全指南

## 认证与授权

### 用户认证
- 实现JWT（JSON Web Token）进行无状态认证
- 使用刷新令牌延长会话
- 安全存储敏感用户数据（密码必须哈希处理）
- 实施适当的密码策略

### 授权
- 使用JWT生成Token等
- 通过拦截器或者Filter来实现权限校验、拦截
- 不使用Spring Security

## 数据保护

### 敏感数据处理
- 绝不以明文存储敏感数据
- 对静态敏感数据使用加密
- 在日志和UI中对敏感数据进行适当遮蔽
- 遵循数据最小化原则

### 输入验证
- 在控制器/API层验证所有用户输入
- 采用白名单验证方法
- 净化数据以防止注入攻击
- 使用参数化查询进行数据库操作

## API安全

### 安全头部
- 设置适当的安全头部：
  - Content-Security-Policy
  - X-Content-Type-Options
  - X-Frame-Options
  - X-XSS-Protection
  - Strict-Transport-Security

### CORS配置
- 配置适当的CORS策略
- 限制允许的来源、方法和头部
- 避免使用`Access-Control-Allow-Origin: *`

### 限速
- 为公共API实现限速
- 对认证端点采用更严格的限制
- 使用令牌桶或滑动窗口算法

## 前端安全

### XSS防护
- 净化所有用户生成的内容
- 使用Vue.js内置的XSS保护功能
- 避免对不可信数据使用`v-html`
- 实现内容安全策略（CSP）

### 安全存储
- 绝不在localStorage或sessionStorage中存储敏感数据
- 使用HttpOnly cookie存储认证令牌
- 将敏感状态保持在内存中
- 用户登出时清除敏感数据

## 安全编码实践

### 通用安全指南
- 保持依赖项更新并扫描漏洞
- 遵循OWASP十大安全指南
- 实现安全头部和HTTPS
- 定期进行安全代码审查

### 安全配置
- 使用环境变量存储敏感配置
- 绝不将密钥提交到版本控制
- 对生产凭证使用密钥管理
- 针对不同环境应用不同安全级别
